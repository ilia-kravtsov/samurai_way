{"version":3,"file":"static/js/60.ee0110ed.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Messages/Messages.module.css?8e7e","webpack://samurai-way/./src/components/Messages/Message/MessageStyle.module.css?89a6","components/Messages/Message/Message.tsx","webpack://samurai-way/./src/components/Messages/MessageItem/MessageItemStyle.module.css?4442","components/Messages/MessageItem/MessageItem.tsx","webpack://samurai-way/./src/components/Messages/MessageSender/MessageSender.module.css?4f09","components/Messages/MessageSender/MessageSender.tsx","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"Messages_messagesContainer__BRN8L\",\"messagesItems\":\"Messages_messagesItems__uZdzU\",\"messagesContent\":\"Messages_messagesContent__-9QVf\",\"ulMessagesContent\":\"Messages_ulMessagesContent__JYq5G\",\"messBodyBlock\":\"Messages_messBodyBlock__fVYG1\"};","// extracted by mini-css-extract-plugin\nexport default {\"txtAndAvaMe\":\"MessageStyle_txtAndAvaMe__BmSLq\",\"txtAndAvaHim\":\"MessageStyle_txtAndAvaHim__U24BO\",\"txtAndAvaMeNew\":\"MessageStyle_txtAndAvaMeNew__ZXRYp\",\"txtMe\":\"MessageStyle_txtMe__zOBQ1\",\"txtHim\":\"MessageStyle_txtHim__2goRB\",\"exactText\":\"MessageStyle_exactText__H2wsU\",\"deleteIcon\":\"MessageStyle_deleteIcon__sEtgc\",\"avaMe\":\"MessageStyle_avaMe__2PJWe\",\"avaHim\":\"MessageStyle_avaHim__qLA6L\",\"angleMe\":\"MessageStyle_angleMe__XoCoz\",\"angleHim\":\"MessageStyle_angleHim__w+U8v\"};","import React from 'react'\r\nimport s from './MessageStyle.module.css'\r\nimport {IconButton} from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: string\r\n    index: number\r\n    onDelClickCallback: (id: string) => void\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    let txtAndAvaContainer = s.txtAndAvaMe\r\n    let txt = s.txtMe\r\n    let ava = s.avaMe\r\n    let angle = s.angleMe\r\n\r\n    if (props.index === 1) {\r\n         txtAndAvaContainer = s.txtAndAvaHim\r\n         txt = s.txtHim\r\n         ava = s.avaHim\r\n         angle = s.angleHim\r\n    }\r\n\r\n    if (props.index > 1) {\r\n        txtAndAvaContainer = s.txtAndAvaMeNew\r\n    }\r\n\r\n    const onDelClick = () => {\r\n        props.onDelClickCallback(props.id)\r\n    }\r\n\r\n    return (\r\n        <li className={txtAndAvaContainer}>\r\n            <div className={txt}>\r\n                <span className={s.exactText}>{props.message}</span>\r\n                <IconButton onClick={onDelClick}\r\n                            color={'primary'}\r\n                            className={s.deleteIcon}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </div>\r\n            <div className={angle}></div>\r\n            <img src='https://kartinkin.net/uploads/posts/2021-03/1616119039_2-p-bred-pitt-krasivie-foto-2.jpg'\r\n                alt=\"Groot\" className={ava}/>\r\n        </li>\r\n    )\r\n\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"itemLinkImg\":\"MessageItemStyle_itemLinkImg__T7Mg9\",\"active\":\"MessageItemStyle_active__ql5Xv\",\"ava\":\"MessageItemStyle_ava__EOKWF\",\"itemName\":\"MessageItemStyle_itemName__Dp2qr\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./MessageItemStyle.module.css\";\r\n\r\ntype MessageItemType = {\r\n    name: string;\r\n    id: string;\r\n}\r\n\r\nconst MessageItem = (props: MessageItemType) => {\r\n    let path = '/messages/' + props.name;\r\n\r\n    return <NavLink to={path} activeClassName={s.active} className={s.itemLinkImg}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'\r\n                 alt=\"Groot\" className={s.ava}/>\r\n            {props.name}\r\n        </NavLink>\r\n}\r\nexport default MessageItem\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageSender_container__qOtPe\",\"textareaS\":\"MessageSender_textareaS__IYdH6\",\"btnS\":\"MessageSender_btnS__FIEtL\"};","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport s from './MessageSender.module.css'\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\ntype MessageSenderType = {\r\n    myNewMessageText: string\r\n    addMyNewMessageAC: (newMessageBody: string) => void\r\n    setMyNewMessageAC: (newMessageText: string) => void\r\n}\r\n\r\nexport const MessageSender: React.FC<MessageSenderType> = (props) => {\r\n\r\n    const addMyNewMessageUI = () => {\r\n        props.addMyNewMessageAC(props.myNewMessageText)\r\n    }\r\n\r\n    const onMyNewMessageChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMyNewMessageAC(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.myNewMessageText.trim()) {\r\n                props.addMyNewMessageAC(props.myNewMessageText)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <TextField className={s.textareaS}\r\n                       onChange={onMyNewMessageChange}\r\n                       onKeyDown={onKeyDown}\r\n                       value={props.myNewMessageText}\r\n                       label='Enter your message'\r\n                       variant=\"outlined\"\r\n                       multiline\r\n                       maxRows={4}\r\n                       sx={{w: '70%',}}\r\n                       InputProps={{sx: {height: '8vh'}}}\r\n            ></TextField>\r\n            <IconButton onClick={addMyNewMessageUI}\r\n                        className={s.btnS}\r\n                        size={'medium'}\r\n                        color={'primary'}>\r\n                <AddIcon/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n/*\r\nconst MessageSender: React.FC<any> = (props) => {\r\n\r\n    const addNewMessage = (values: {newMessageBody?: string}  ) => {\r\n        //console.log(values) - текст из поля которое ему сообщил redux form\r\n        //alert(values.newMessageBody)\r\n        props.addMyNewMessageUI(values.newMessageBody)\r\n    }\r\n\r\n    return <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n};\r\n\r\nexport default MessageSender;\r\n\r\nconst maxLengthCreator_50 = maxLengthCreator(50)\r\n\r\nconst MessageSenderRedux: React.FC<any> = (props) => {\r\n    return (\r\n        <form className={s.container} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   validate={[required, maxLengthCreator_50]}\r\n                   name={'newMessageBody'}\r\n                   placeholder={'Enter your message'}\r\n                   className={s.textareaS}/>\r\n            <button className={s.btnS}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(MessageSenderRedux)\r\n */\r\n\r\n// type NewMessage = {\r\n//     newMessageBody: string\r\n// }\r\n//\r\n// type CombinedProps = MessageSenderType & InjectedFormProps<NewMessage, MessageSenderType>;\r\n//\r\n// const MessageSender: React.FC<CombinedProps> = (props) => {\r\n\r\n// return (\r\n//             <form className={s.container} onSubmit={props.handleSubmit}>\r\n//                 {/*<TextField ref={myNewMessage}*/}\r\n// {/*           className={s.textareaS}*/}\r\n// {/*           onChange={onMyNewMessageChange}*/}\r\n// {/*           onKeyDown={onKeyDown}*/}\r\n// {/*           value={props.myNewMessageText}*/}\r\n// {/*           label='Enter your message'*/}\r\n// {/*           variant=\"outlined\"*/}\r\n// {/*           multiline*/}\r\n// {/*           maxRows={4}*/}\r\n// {/*           sx={{w: '70%',}}*/}\r\n// {/*           InputProps={{sx: {height: '8vh'}}}*/}\r\n// {/*></TextField>*/}\r\n// {/*<IconButton onClick={addMyNewMessageUI}*/}\r\n// {/*            className={s.btnS}*/}\r\n// {/*            size={'medium'}*/}\r\n// {/*            color={'primary'}*/}\r\n// {/*> <AddIcon/></IconButton>*/}\r\n// // <Field component={'textarea'} name={'newMessageBody'} placeholder={'Enter your message'}/>\r\n// // <button>Send</button>\r\n// // </form>\r\n// // );\r\n","import React, {useEffect, useRef} from 'react'\r\nimport s from './Messages.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport {MessagesPropsType} from \"./MessagesContainer\";\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {addMyNewMessageAC} from \"redux/messages_page_reducer\";\r\nimport {MessageSender} from \"components/Messages/MessageSender/MessageSender\";\r\n\r\nconst Messages = (props: MessagesPropsType) => {\r\n\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const messagesItemDataElements = props.messagesPage.companionsData.map(companion => {\r\n        return <MessageItem key={companion.id}\r\n                            id={companion.id}\r\n                            name={companion.name}/>\r\n    });\r\n    const messageDataElements = props.messagesPage.messageData.map((messageContent, i) => {\r\n        return <Message key={messageContent.id}\r\n                        id={messageContent.id}\r\n                        message={messageContent.message}\r\n                        onDelClickCallback={props.onDelClickCallback}\r\n                        index={i}/>\r\n    })\r\n\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            ref.current.scrollTop = Math.ceil(\r\n                ref.current.scrollHeight - ref.current.clientHeight,\r\n            );\r\n        }\r\n    }, [props.messagesPage.messageData])\r\n\r\n    if (props.isAuth === false) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.messagesContainer}>\r\n            <div className={s.messagesItems}>\r\n                {messagesItemDataElements}\r\n            </div>\r\n            <div className={s.messBodyBlock}>\r\n                <div className={s.messagesContent} ref={ref}>\r\n                    <ul ref={listRef} className={s.ulMessagesContent}>\r\n                        {messageDataElements}\r\n                    </ul>\r\n                </div>\r\n                <MessageSender myNewMessageText={props.messagesPage.myNewMessageText}\r\n                               addMyNewMessageAC={props.addMyNewMessageAC}\r\n                               setMyNewMessageAC={props.setMyNewMessageAC}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Messages from \"./Messages\";\r\nimport {addMyNewMessageAC, deleteMyNewMessageAC, setMyNewMessageAC} from \"../../redux/messages_page_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\nexport type MessagesItemDataType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageDataType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type MessagesPageType = {\r\n    companionsData: Array<MessagesItemDataType>\r\n    messageData: Array<MessageDataType>\r\n    myNewMessageText: string\r\n}\r\ntype MapStatePropsType = {\r\n    messagesPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMyNewMessageAC: (newMessageBody: string) => void\r\n    onDelClickCallback: (id: string) => void\r\n    setMyNewMessageAC: (newMessageText: string) => void\r\n}\r\nexport type MessagesPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMyNewMessageAC: (newMessageBody) => dispatch(addMyNewMessageAC(newMessageBody)),\r\n        onDelClickCallback: (id: string) => dispatch(deleteMyNewMessageAC(id)),\r\n        setMyNewMessageAC: (newMessageText: string) => dispatch(setMyNewMessageAC(newMessageText)),\r\n    }\r\n}\r\n\r\nconst AuthRedirectComponent = withAuthRedirect(Messages)\r\n\r\nconst MessagesContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default MessagesContainer\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, mapDispatchToProps),\r\n//     withAuthRedirect,\r\n// )(Messages)"],"names":["props","txtAndAvaContainer","s","txt","ava","angle","index","className","message","IconButton","onClick","onDelClickCallback","id","color","Delete","src","alt","path","name","to","activeClassName","MessageSender","TextField","onChange","e","setMyNewMessageAC","currentTarget","value","onKeyDown","key","myNewMessageText","trim","addMyNewMessageAC","label","variant","multiline","maxRows","sx","w","InputProps","height","size","Add","useAutoAnimate","listRef","messagesItemDataElements","messagesPage","companionsData","map","companion","messageDataElements","messageData","messageContent","i","ref","useRef","useEffect","current","scrollTop","Math","ceil","scrollHeight","clientHeight","isAuth","AuthRedirectComponent","withAuthRedirect","Messages","connect","state","auth","dispatch","newMessageBody","deleteMyNewMessageAC","newMessageText"],"sourceRoot":""}
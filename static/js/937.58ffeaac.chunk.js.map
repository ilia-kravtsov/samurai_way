{"version":3,"file":"static/js/937.58ffeaac.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Messages/Messages.module.scss?b126","webpack://samurai-way/./src/components/Messages/Message/MessageStyle.module.scss?eec2","components/EditMessage.tsx","components/Messages/Message/Message.tsx","webpack://samurai-way/./src/components/Messages/MessageSender/MessageSender.module.scss?06c6","components/Messages/MessageSender/MessageSender.tsx","webpack://samurai-way/./src/components/Messages/MessageItem/MessageItemStyle.module.scss?b4b8","components/Messages/MessageItem/MessageItem.tsx","components/Messages/Messages.tsx","components/Messages/MessagesContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messagesContainer\":\"Messages_messagesContainer__y9gWk\",\"messagesItems\":\"Messages_messagesItems__xZiOP\",\"messagesContent\":\"Messages_messagesContent__6A+DZ\",\"ulMessagesContent\":\"Messages_ulMessagesContent__y7pWW\",\"messBodyBlock\":\"Messages_messBodyBlock__+vueo\"};","// extracted by mini-css-extract-plugin\nexport default {\"txtAndAvaMe\":\"MessageStyle_txtAndAvaMe__6atf5\",\"txtAndAvaHim\":\"MessageStyle_txtAndAvaHim__20QJ2\",\"txtAndAvaMeNew\":\"MessageStyle_txtAndAvaMeNew__HiC8M\",\"txtMe\":\"MessageStyle_txtMe__Y7icP\",\"txtHim\":\"MessageStyle_txtHim__VOzLa\",\"deleteIcon\":\"MessageStyle_deleteIcon__Jzu4j\",\"avaMe\":\"MessageStyle_avaMe__d+y18\",\"avaHim\":\"MessageStyle_avaHim__Xq2M0\",\"angleMe\":\"MessageStyle_angleMe__6YhUA\",\"angleHim\":\"MessageStyle_angleHim__Y5NGK\"};","import React, {ChangeEvent, useState, KeyboardEvent, FC} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditMessageType = {\r\n    message: string\r\n    changeMessage: (mess: string) => void\r\n    editMode: boolean\r\n    setEditMode: (mode: boolean) => void\r\n}\r\n\r\nexport const EditMessage: FC<EditMessageType> = ({message, changeMessage, editMode, setEditMode}) => {\r\n\r\n    const [inputValue, setInputValue] = useState<string>(message)\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        changeMessage(inputValue)\r\n        setEditMode(false)\r\n    }\r\n    const onChaneInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.currentTarget.value)\r\n    }\r\n    const onKeyPress = (event: KeyboardEvent<HTMLInputElement>) => event.key === 'Enter' && offEditMode()\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField onBlur={offEditMode}\r\n                         onKeyUp={onKeyPress}\r\n                         autoFocus\r\n                         value={inputValue}\r\n                         onChange={onChaneInputHandler}\r\n                         variant={'standard'}\r\n                         sx={{width: '120px'}}\r\n            />\r\n            : <span onDoubleClick={onEditMode} className={'editSpan'}>{message}</span>\r\n    );\r\n};\r\n\r\n","import React, {useState} from 'react'\r\nimport s from './MessageStyle.module.scss'\r\nimport {IconButton} from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport {EditMessage} from \"components/EditMessage\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: string\r\n    index: number\r\n    onDelClickCallback: (id: string) => void\r\n    changeMessage: (newMessageText: string, newMessageId: string) => void\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    let txtAndAvaContainer = s.txtAndAvaMe\r\n    let txt = s.txtMe\r\n    let ava = s.avaMe\r\n    let angle = s.angleMe\r\n    let avaSrc = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'\r\n\r\n    if (props.index === 1) {\r\n         txtAndAvaContainer = s.txtAndAvaHim\r\n         txt = s.txtHim\r\n         ava = s.avaHim\r\n         angle = s.angleHim\r\n         avaSrc = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQd0qLgeb3w2s-sisWSBmrv9J9Y_bLYVz0kOg&usqp=CAU'\r\n    }\r\n\r\n    if (props.index > 1) {\r\n        txtAndAvaContainer = s.txtAndAvaMeNew\r\n    }\r\n\r\n    const onDelClick = () => {\r\n        props.onDelClickCallback(props.id)\r\n    }\r\n\r\n    const onEditModeClick = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const changeMessageCB = (mess: string) => {\r\n        props.changeMessage(mess, props.id)\r\n    }\r\n\r\n    return (\r\n        <li className={txtAndAvaContainer}>\r\n            <div className={txt}>\r\n                <EditMessage message={props.message} changeMessage={changeMessageCB} editMode={editMode} setEditMode={setEditMode}/>\r\n                {txtAndAvaContainer !== s.txtAndAvaHim\r\n                    ? <div>\r\n                    <IconButton onClick={onDelClick}\r\n                                color={'primary'}\r\n                                className={s.deleteIcon}\r\n                    >\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={onEditModeClick}\r\n                                color={'primary'}\r\n                                className={s.deleteIcon}\r\n                    >\r\n                        <EditIcon />\r\n                    </IconButton>\r\n                    </div>\r\n                    : <div></div>\r\n                }\r\n            </div>\r\n            <div className={angle}></div>\r\n            <img src={avaSrc}\r\n                alt=\"Groot\" className={ava}/>\r\n        </li>\r\n    )\r\n\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageSender_container__1ARPw\",\"textareaS\":\"MessageSender_textareaS__s6BQs\",\"btnS\":\"MessageSender_btnS__wCWix\"};","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport s from './MessageSender.module.scss'\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\ntype MessageSenderType = {\r\n    myNewMessageText: string\r\n    addMyNewMessageAC: (newMessageBody: string) => void\r\n    setMyNewMessageAC: (newMessageText: string) => void\r\n}\r\n\r\nexport const MessageSender: React.FC<MessageSenderType> = (props) => {\r\n\r\n    const addMyNewMessageUI = () => {\r\n        if (props.myNewMessageText.trim()) {\r\n            props.addMyNewMessageAC(props.myNewMessageText)\r\n        }\r\n    }\r\n\r\n    const onMyNewMessageChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMyNewMessageAC(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.myNewMessageText.trim()) {\r\n                props.addMyNewMessageAC(props.myNewMessageText)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <TextField className={s.textareaS}\r\n                       onChange={onMyNewMessageChange}\r\n                       onKeyDown={onKeyDown}\r\n                       value={props.myNewMessageText}\r\n                       label='Enter your message'\r\n                       variant=\"outlined\"\r\n                       multiline\r\n                       maxRows={4}\r\n                       sx={{w: '70%'}}\r\n                       InputProps={{sx: {height: '8vh'}}}\r\n            ></TextField>\r\n            <IconButton onClick={addMyNewMessageUI}\r\n                        sx={{w: '70%', borderRadius: '5px'}}\r\n                        className={s.btnS}\r\n                        size={'medium'}\r\n                        color={'primary'}>\r\n                <AddIcon/>\r\n            </IconButton>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n/*\r\nconst MessageSender: React.FC<any> = (props) => {\r\n\r\n    const addNewMessage = (values: {newMessageBody?: string}  ) => {\r\n        //console.log(values) - текст из поля которое ему сообщил redux form\r\n        //alert(values.newMessageBody)\r\n        props.addMyNewMessageUI(values.newMessageBody)\r\n    }\r\n\r\n    return <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n};\r\n\r\nexport default MessageSender;\r\n\r\nconst maxLengthCreator_50 = maxLengthCreator(50)\r\n\r\nconst MessageSenderRedux: React.FC<any> = (props) => {\r\n    return (\r\n        <form className={s.container} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   validate={[required, maxLengthCreator_50]}\r\n                   name={'newMessageBody'}\r\n                   placeholder={'Enter your message'}\r\n                   className={s.textareaS}/>\r\n            <button className={s.btnS}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(MessageSenderRedux)\r\n */\r\n\r\n// type NewMessage = {\r\n//     newMessageBody: string\r\n// }\r\n//\r\n// type CombinedProps = MessageSenderType & InjectedFormProps<NewMessage, MessageSenderType>;\r\n//\r\n// const MessageSender: React.FC<CombinedProps> = (props) => {\r\n\r\n// return (\r\n//             <form className={s.container} onSubmit={props.handleSubmit}>\r\n//                 {/*<TextField ref={myNewMessage}*/}\r\n// {/*           className={s.textareaS}*/}\r\n// {/*           onChange={onMyNewMessageChange}*/}\r\n// {/*           onKeyDown={onKeyDown}*/}\r\n// {/*           value={props.myNewMessageText}*/}\r\n// {/*           label='Enter your message'*/}\r\n// {/*           variant=\"outlined\"*/}\r\n// {/*           multiline*/}\r\n// {/*           maxRows={4}*/}\r\n// {/*           sx={{w: '70%',}}*/}\r\n// {/*           InputProps={{sx: {height: '8vh'}}}*/}\r\n// {/*></TextField>*/}\r\n// {/*<IconButton onClick={addMyNewMessageUI}*/}\r\n// {/*            className={s.btnS}*/}\r\n// {/*            size={'medium'}*/}\r\n// {/*            color={'primary'}*/}\r\n// {/*> <AddIcon/></IconButton>*/}\r\n// // <Field component={'textarea'} name={'newMessageBody'} placeholder={'Enter your message'}/>\r\n// // <button>Send</button>\r\n// // </form>\r\n// // );\r\n","// extracted by mini-css-extract-plugin\nexport default {\"itemLinkImg\":\"MessageItemStyle_itemLinkImg__cgLtq\",\"active\":\"MessageItemStyle_active__Ya-oI\",\"ava\":\"MessageItemStyle_ava__LgZqD\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from \"./MessageItemStyle.module.scss\";\r\n\r\ntype MessageItemType = {\r\n    name: string;\r\n    id: number;\r\n    photoSrc: string\r\n}\r\n\r\nconst MessageItem = (props: MessageItemType) => {\r\n\r\n    let path = '/messages/' + props.name;\r\n\r\n    return <NavLink to={path} activeClassName={s.active} className={s.itemLinkImg}>\r\n            <img src={props.photoSrc}\r\n                 alt=\"Groot\" className={s.ava}/>\r\n            {props.name}\r\n        </NavLink>\r\n}\r\nexport default MessageItem\r\n","import React, {useEffect, useRef} from 'react'\r\nimport s from './Messages.module.scss'\r\nimport Message from \"./Message/Message\";\r\nimport {MessagesPropsType} from \"./MessagesContainer\";\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {MessageSender} from \"components/Messages/MessageSender/MessageSender\";\r\nimport MessageItem from \"components/Messages/MessageItem/MessageItem\";\r\n\r\nconst Messages = (props: MessagesPropsType) => {\r\n\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const messagesItemDataElements = props.users.map((friend,i) => {\r\n\r\n        let photoSrc = i === 4 ? 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQd0qLgeb3w2s-sisWSBmrv9J9Y_bLYVz0kOg&usqp=CAU' : friend.photos.small\r\n                               ? friend.photos.small : 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'\r\n\r\n        return <MessageItem key={friend.id}\r\n                            id={friend.id}\r\n                            photoSrc={photoSrc}\r\n                            name={friend.name}/>\r\n    });\r\n    const messageDataElements = props.messagesPage.messageData.map((messageContent, i) => {\r\n        return <Message key={messageContent.id}\r\n                        id={messageContent.id}\r\n                        message={messageContent.message}\r\n                        onDelClickCallback={props.onDelClickCallback}\r\n                        changeMessage={props.changeMyMessageAC}\r\n                        index={i}/>\r\n    })\r\n\r\n\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            ref.current.scrollTop = Math.ceil(\r\n                ref.current.scrollHeight - ref.current.clientHeight,\r\n            );\r\n        }\r\n    }, [props.messagesPage.messageData])\r\n\r\n    if (props.isAuth === false) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={s.messagesContainer}>\r\n            <div className={s.messagesItems}>\r\n                {messagesItemDataElements}\r\n            </div>\r\n            <div className={s.messBodyBlock}>\r\n                <div className={s.messagesContent} ref={ref}>\r\n                    <ul ref={listRef} className={s.ulMessagesContent}>\r\n                        {messageDataElements}\r\n                    </ul>\r\n                </div>\r\n                <MessageSender myNewMessageText={props.messagesPage.myNewMessageText}\r\n                               addMyNewMessageAC={props.addMyNewMessageAC}\r\n                               setMyNewMessageAC={props.setMyNewMessageAC}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Messages from \"./Messages\";\r\nimport {\r\n    addMyNewMessageAC,\r\n    changeMyMessageAC,\r\n    deleteMyNewMessageAC,\r\n    setMyNewMessageAC\r\n} from \"../../redux/messages_page_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {UsersApiType} from \"components/Users/UsersContainer\";\r\nimport {getUsers} from \"redux/users_selectors\";\r\n\r\nexport type MessagesItemDataType = {\r\n    id: string\r\n    name: string\r\n}\r\nexport type MessageDataType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type MessagesPageType = {\r\n    companionsData: Array<MessagesItemDataType>\r\n    messageData: Array<MessageDataType>\r\n    myNewMessageText: string\r\n}\r\ntype MapStatePropsType = {\r\n    users: UsersApiType\r\n    messagesPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMyNewMessageAC: (newMessageBody: string) => void\r\n    onDelClickCallback: (id: string) => void\r\n    setMyNewMessageAC: (newMessageText: string) => void\r\n    changeMyMessageAC: (newMessageText: string, newMessageId: string) => void\r\n}\r\nexport type MessagesPropsType = MapStatePropsType & MapDispatchToPropsType;\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        isAuth: state.auth.isAuth,\r\n        users: getUsers(state),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMyNewMessageAC: (newMessageBody) => dispatch(addMyNewMessageAC(newMessageBody)),\r\n        onDelClickCallback: (id: string) => dispatch(deleteMyNewMessageAC(id)),\r\n        setMyNewMessageAC: (newMessageText: string) => dispatch(setMyNewMessageAC(newMessageText)),\r\n        changeMyMessageAC: (newMessageText: string, newMessageId: string) => dispatch(changeMyMessageAC(newMessageText, newMessageId))\r\n    }\r\n}\r\n\r\nconst MessagesContainer = connect(mapStateToProps, mapDispatchToProps)(withAuthRedirect(Messages));\r\n\r\nexport default MessagesContainer\r\n\r\n"],"names":["EditMessage","message","changeMessage","editMode","setEditMode","useState","inputValue","setInputValue","offEditMode","TextField","onBlur","onKeyUp","event","key","autoFocus","value","onChange","currentTarget","variant","sx","width","onDoubleClick","className","props","txtAndAvaContainer","s","txt","ava","angle","avaSrc","index","mess","id","IconButton","onClick","onDelClickCallback","color","Delete","Edit","src","alt","MessageSender","e","setMyNewMessageAC","onKeyDown","myNewMessageText","trim","addMyNewMessageAC","label","multiline","maxRows","w","InputProps","height","borderRadius","size","Add","path","name","to","activeClassName","photoSrc","useAutoAnimate","listRef","messagesItemDataElements","users","map","friend","i","photos","small","messageDataElements","messagesPage","messageData","messageContent","changeMyMessageAC","ref","useRef","useEffect","current","scrollTop","Math","ceil","scrollHeight","clientHeight","isAuth","connect","state","auth","getUsers","dispatch","newMessageBody","deleteMyNewMessageAC","newMessageText","newMessageId","withAuthRedirect","Messages"],"sourceRoot":""}
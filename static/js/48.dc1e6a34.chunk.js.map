{"version":3,"file":"static/js/48.dc1e6a34.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profileInfoContainer\":\"ProfileInfo_profileInfoContainer__3JBvo\",\"avaDescriptionBlock\":\"ProfileInfo_avaDescriptionBlock__nFqK5\",\"avaBorderBlock\":\"ProfileInfo_avaBorderBlock__UzT6s\",\"ava\":\"ProfileInfo_ava__uN7HF\",\"borderDescriptionBLock\":\"ProfileInfo_borderDescriptionBLock__INpho\",\"editInput\":\"ProfileInfo_editInput__2zRdy\",\"name\":\"ProfileInfo_name__1ouk1\",\"status\":\"ProfileInfo_status__n6g0e\",\"statusBlock\":\"ProfileInfo_statusBlock__yR41M\",\"formPersonInformation\":\"ProfileInfo_formPersonInformation__4GBm+\",\"fadeIn\":\"ProfileInfo_fadeIn__Nm8Fc\",\"formPersonFirst\":\"ProfileInfo_formPersonFirst__C-5tv\",\"descriptionData\":\"ProfileInfo_descriptionData__H7flG\",\"preparePostLI\":\"ProfileInfo_preparePostLI__ScdVb\",\"formPersonSecond\":\"ProfileInfo_formPersonSecond__EQDMV\",\"formPersonContacts\":\"ProfileInfo_formPersonContacts__p0w6m\",\"preparePostHeader\":\"ProfileInfo_preparePostHeader__-c-JJ\",\"formError\":\"ProfileInfo_formError__lt5rQ\",\"changePhoto\":\"ProfileInfo_changePhoto__lX-RO\",\"editContactRight\":\"ProfileInfo_editContactRight__4Mho3\",\"lookForAJob\":\"ProfileInfo_lookForAJob__iVIvx\",\"lookForAJobCheckbox\":\"ProfileInfo_lookForAJobCheckbox__czHww\",\"aboutMeSkill\":\"ProfileInfo_aboutMeSkill__l9nBb\",\"personInformationInput\":\"ProfileInfo_personInformationInput__gNrQA\",\"textareaSkill\":\"ProfileInfo_textareaSkill__F3dyM\",\"textareaEditMode\":\"ProfileInfo_textareaEditMode__FdVpe\"};","import React, {FC} from 'react';\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileDataType} from \"components/Profile/ProfileContainer\";\r\nimport {Input} from \"components/common/FormsConntrols/FormControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"validators/validators\";\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport {IconButton} from \"@mui/material\";\r\n\r\ntype ProfileStatusType = {\r\n    profile: ProfileDataType\r\n    isOwner: boolean\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlag: boolean\r\n    personDataFlagToggle: (personDataFlag: boolean) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const activateEditMode = () => {\r\n        props.personDataFlagToggle(true)\r\n    }\r\n\r\n    const onSubmit = (formData: FormInputsType) => {\r\n        props.saveProfileData(formData)\r\n    }\r\n\r\n    return (\r\n        <div className={s.borderDescriptionBLock}>\r\n            {props.personDataFlag\r\n                ? <ProfileReduxForm profile={props.profile}\r\n                                    isOwner={props.isOwner}\r\n                                    activateEditMode={activateEditMode}\r\n                                    onSubmit={onSubmit}\r\n                                    initialValues={props.profile}/>\r\n                : <ProfileData profile={props.profile}\r\n                               isOwner={props.isOwner}\r\n                               activateEditMode={activateEditMode}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataTypes = {\r\n    profile: ProfileDataType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataTypes) => {\r\n\r\n    return (\r\n        <div className={s.formPersonInformation}>\r\n            <div className={s.formPersonFirst}>\r\n                <h2 className={s.preparePostHeader}>Information:</h2>\r\n                <div className={s.descriptionData}><span className={s.preparePostLI}>About me:</span> {props.profile.aboutMe || \"i'm the best\"}</div>\r\n                <div className={s.descriptionData}><span className={s.preparePostLI}>Skills:</span> {props.profile.lookingForAJobDescription || \"i almost know React\"}</div>\r\n                <div className={s.descriptionData}><span className={s.preparePostLI}>Looking for a job:</span> {props.profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            </div>\r\n            <div className={s.formPersonSecond}>\r\n                {/*<div className={s.formPersonContacts}>*/}\r\n                {/*    <h2 className={s.preparePostHeader}>Contacts:</h2>*/}\r\n                {/*    {Object.keys(props.profile.contacts).map((key, i) => {*/}\r\n                {/*        if (i > 3 && i < 7) {*/}\r\n                {/*            // @ts-ignore*/}\r\n                {/*            return <Contact contactTitle={key} contactValue={props.profile.contacts[key] ? props.profile.contacts[key] : `www.${key}.com`} key={key}/>*/}\r\n                {/*        }*/}\r\n                {/*    })}*/}\r\n                {/*</div>*/}\r\n                {props.isOwner &&\r\n                    <IconButton onClick={props.activateEditMode}\r\n                                              style={{borderRadius: '5px'}}\r\n                                              color={'primary'}>\r\n                        <EditIcon/>\r\n                    </IconButton>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = (props: ContactType) => {\r\n    return <div className={s.descriptionData}><span className={s.preparePostLI}>{props.contactTitle}:</span> {props.contactValue}</div>\r\n}\r\n\r\nexport type FormInputsType = {\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    skills: string\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    }\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<FormInputsType, ProfileDataTypes> & ProfileDataTypes> = (props) => {\r\n\r\n    const {profile, error} = props\r\n\r\n    return (\r\n        <form className={s.formPersonInformation} onSubmit={props.handleSubmit}>\r\n            <div className={s.formPersonFirst}>\r\n                <div className={s.aboutMeSkill}>\r\n                    <span className={s.preparePostLI}>About me:</span>\r\n                    <div className={s.personInformationInput}>\r\n                        <Field placeholder={'tell about yourself'}\r\n                               component={Input}\r\n                               validate={[required]}\r\n                               name={'aboutMe'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.aboutMeSkill}>\r\n                    <span className={s.preparePostLI}>Skills:</span>\r\n                    <div className={s.personInformationInput}>\r\n                        <Field placeholder={'your skills'}\r\n                               component={Input}\r\n                               validate={[required]}\r\n                               name={'lookingForAJobDescription'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={s.lookForAJob}>\r\n                    <label htmlFor=\"checkboxId\"><span className={s.preparePostLI}>Looking for a job:</span></label>\r\n                    <Field type={\"checkbox\"}\r\n                           id={'checkboxId'}\r\n                           component={'input'}\r\n                           name={'lookingForAJob'}\r\n                           className={s.lookForAJobCheckbox}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={s.formPersonSecond}>\r\n                {/*<div>*/}\r\n                {/*    {Object.keys(profile.contacts).map((key, i) => {*/}\r\n                {/*        if (i > 3 && i < 7) {*/}\r\n                {/*            return (*/}\r\n                {/*                <div className={s.editContactRight} key={key}>*/}\r\n                {/*                    <span className={s.preparePostLI}>{key}:</span>*/}\r\n                {/*                    <div>*/}\r\n                {/*                        <Field placeholder={key}*/}\r\n                {/*                               component={Input}*/}\r\n                {/*                               validate={[required]}*/}\r\n                {/*                               name={'contacts.' + key}*/}\r\n                {/*                               className={s.personInformationInput}/>*/}\r\n                {/*                    </div>*/}\r\n                {/*                </div>*/}\r\n                {/*            )*/}\r\n                {/*        }*/}\r\n                {/*    })}*/}\r\n                {/*</div>*/}\r\n                {error && <div className={s.formError}>{error}</div>}\r\n            </div>\r\n            <button>\r\n                <SaveIcon  style={{borderRadius: '5px', cursor: 'pointer'}}\r\n                           color={'primary'}/>\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileReduxForm = reduxForm<FormInputsType, ProfileDataTypes>({form: 'profileData'})(ProfileDataForm)\r\n\r\n\r\n// state = {\r\n//     editMode: false,\r\n//     status: this.props.status\r\n// }\r\n//\r\n// activateStatus = () => {\r\n//     this.setState({\r\n//         editMode: true,\r\n//         status: this.props.status\r\n//     })\r\n// }\r\n//\r\n// deActivateStatus = () => {\r\n//     this.setState({\r\n//         editMode: false,\r\n//         status: this.state.status\r\n//     })\r\n//     this.props.updateStatusTC(this.state.status)\r\n// }\r\n//\r\n// changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     this.setState({\r\n//         status: e.currentTarget.value\r\n//     })\r\n// }\r\n//\r\n// componentDidUpdate(prevProps:Readonly < ProfileStatusType >, prevState:Readonly<{}>)\r\n// {\r\n//     if (prevProps.status !== this.props.status) {\r\n//         this.setState({\r\n//             status: this.props.status\r\n//         })\r\n//     }\r\n// }","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.scss';\r\nimport {ProfileDataType} from \"../ProfileContainer\";\r\nimport {PreLoader} from \"../../common/PreLoader/PreLoader\";\r\nimport {FormInputsType, ProfileStatusWithHooks} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\nimport {Button, IconButton, TextField, Tooltip} from \"@mui/material\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport AddAPhotoIcon from '@mui/icons-material/AddAPhoto';\r\n\r\n\r\n/*\r\nсоздать свой стейт пользователей и работать уже с ним\r\n */\r\n\r\n\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileDataType\r\n    updateStatusTC: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savedPhoto: (ava: string | Blob) => void\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlag: boolean\r\n    personDataFlagToggle: (personDataFlag: boolean) => void\r\n    errorStatusFlag: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfo) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deActivateStatus = () => {\r\n        setEditMode(false)\r\n        props.updateStatusTC(status)\r\n    }\r\n\r\n    const activateStatus = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    if (Object.keys(props.profile).length === 0) {\r\n        return <PreLoader/>\r\n    }\r\n\r\n    const onMainPhotoSElect = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savedPhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.profileInfoContainer}>\r\n                <div className={s.avaDescriptionBlock}>\r\n                    <div className={s.avaBorderBlock}>\r\n                        <img\r\n                            src={props.profile.photos.large || 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'}\r\n                            alt=\"ava\" className={s.ava}/>\r\n                        {props.isOwner && <label htmlFor='file' className={s.changePhoto}>\r\n                            <input\r\n                                id='file'\r\n                                type='file'\r\n                                multiple\r\n                                style={{ position: 'fixed', top: '-100em' }}\r\n                                onChange={onMainPhotoSElect}\r\n                            />\r\n                            <Tooltip title='Change Photo'>\r\n                                <IconButton component='span'>\r\n                                    <AddAPhotoIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </label>\r\n                        }\r\n                    </div>\r\n                    <div className={s.name}>{props.profile.fullName || \"Simon\"}</div>\r\n                    <section className={s.status}>\r\n                        <span className={s.statusHeader}>Status: </span>\r\n                        {editMode\r\n                            ? <span className={s.statusBlock}>\r\n                                    <TextField value={status}\r\n                                           onChange={changeStatus}\r\n                                           className={s.editInput}\r\n                                           variant={'standard'}\r\n                                           autoFocus\r\n                                    />\r\n                                    <Button sx={{ml: '10px'}} variant={'contained'} onClick={deActivateStatus}>\r\n                                        Save\r\n                                    </Button>\r\n                                </span>\r\n                            :\r\n                            <span className={s.statusBlock}>\r\n                            {props.status || \"I haven't added my status yet\"}\r\n                                <IconButton onClick={activateStatus}\r\n                                            style={{marginLeft: '20px', borderRadius: '5px'}}\r\n                                            color={'primary'}>\r\n                                    <EditIcon/>\r\n                                </IconButton>\r\n                                {props.errorStatusFlag && <div>{props.errorStatusFlag}</div>}\r\n                            </span>\r\n                        }\r\n                    </section>\r\n                </div>\r\n            </div>\r\n\r\n            <ProfileStatusWithHooks profile={props.profile}\r\n                                    isOwner={props.isOwner}\r\n                                    saveProfileData={props.saveProfileData}\r\n                                    personDataFlag={props.personDataFlag}\r\n                                    personDataFlagToggle={props.personDataFlagToggle}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsContainer\":\"MyPosts_postsContainer__DrlOo\",\"postsBlock\":\"MyPosts_postsBlock__w0qW7\",\"posts\":\"MyPosts_posts__U7DiB\",\"postIcons\":\"MyPosts_postIcons__szCrN\",\"btnPost\":\"MyPosts_btnPost__Ch9CD\",\"addPostContainer\":\"MyPosts_addPostContainer__rwZuN\",\"preparePostTextarea\":\"MyPosts_preparePostTextarea__cXkzO\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__nVajh\",\"imgSpanContainer\":\"Post_imgSpanContainer__nWDsV\",\"postMessage\":\"Post_postMessage__eyaPE\",\"likeDisContainer\":\"Post_likeDisContainer__Cm6df\",\"itemImg\":\"Post_itemImg__evI1G\",\"anglePost\":\"Post_anglePost__0P6Lm\",\"editPostBlock\":\"Post_editPostBlock__DYqA1\"};","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './Post.module.scss';\r\nimport {Button, IconButton, TextField} from '@mui/material';\r\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@mui/icons-material/ThumbDownAlt';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ChatBubbleIcon from '@mui/icons-material/ChatBubble';\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\n/*\r\nfix the post\r\n */\r\n\r\ntype PostType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n    disLikesCount: number\r\n    views: number\r\n    comments: number\r\n    delPost: (id: string) => void\r\n    saveNewPostTextCB: (id: string, newPostText: string) => void\r\n    activeLikeColorCB: (id: string, value: 'primary' | 'secondary') => void\r\n    activeDisLikeColorCB: (id: string, value: 'primary' | 'secondary') => void\r\n    activeLikeColor: 'primary' | 'secondary'\r\n    activeDisLikeColor: 'primary' | 'secondary'\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    let [postText, setNewPostText] = useState<string>(props.message)\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const likeClick = () => {\r\n        if (props.activeLikeColor === 'secondary') {\r\n            props.activeLikeColorCB(props.id, 'primary')\r\n        } else {\r\n            props.activeLikeColorCB(props.id, 'secondary')\r\n        }\r\n    }\r\n\r\n    const disLikeClick = () => {\r\n        if (props.activeDisLikeColor === 'secondary') {\r\n            props.activeDisLikeColorCB(props.id, 'primary')\r\n        } else {\r\n            props.activeDisLikeColorCB(props.id, 'secondary')\r\n        }\r\n    }\r\n\r\n    const delClick = () => props.delPost(props.id);\r\n    const editPostCB = () => setEditMode(true);\r\n    const changePost = (e: ChangeEvent<HTMLInputElement>) => setNewPostText(e.currentTarget.value);\r\n\r\n    const saveNewPostText = () => {\r\n        if (postText.trim()) {\r\n            props.saveNewPostTextCB(props.id, postText)\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <li className={s.postContainer}>\r\n            <div className={s.imgSpanContainer}>\r\n                <img\r\n                    src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'\r\n                    alt='brad pit' className={s.itemImg}/>\r\n                <span className={s.anglePost}></span>\r\n                {\r\n                    editMode\r\n                        ? <span>\r\n                            <TextField value={postText}\r\n                                       onChange={changePost}\r\n                                       variant={'outlined'}\r\n                                       autoFocus\r\n                                       className={s.editPostBlock}\r\n                                       multiline\r\n                            />\r\n                            <Button sx={{ml: '10px'}} variant={'contained'} onClick={saveNewPostText}>\r\n                                Save\r\n                            </Button>\r\n                          </span>\r\n                        : <span className={s.postMessage}>{props.message}</span>\r\n                }\r\n            </div>\r\n            <div className={s.likeDisContainer}>\r\n                <IconButton color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <VisibilityIcon/>\r\n                </IconButton>\r\n                <span className={s.postNumbers}>{props.views}</span>\r\n                <IconButton color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ChatBubbleIcon/>\r\n                </IconButton>\r\n                <span className={s.postNumbers}>{props.comments}</span>\r\n                <IconButton onClick={likeClick}\r\n                            color={props.activeLikeColor}\r\n                            className={s.activeIcon}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ThumbUpAltIcon/>\r\n                </IconButton>\r\n                <span className={s.postNumbers}>{props.likesCount}</span>\r\n                <IconButton onClick={disLikeClick}\r\n                            color={props.activeDisLikeColor}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ThumbDownAltIcon/>\r\n                </IconButton>\r\n                <span className={s.postNumbers}>{props.disLikesCount}</span>\r\n                <IconButton color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                            onClick={editPostCB}\r\n                >\r\n                    <EditIcon/>\r\n                </IconButton>\r\n                <IconButton onClick={delClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React, {ChangeEvent, KeyboardEvent} from 'react';\r\nimport s from './MyPosts.module.scss';\r\nimport Post from './Post/Post';\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport AddAPhotoIcon from '@mui/icons-material/AddAPhoto';\r\nimport VideocamIcon from '@mui/icons-material/Videocam';\r\nimport ImageIcon from '@mui/icons-material/Image';\r\nimport MusicNoteIcon from '@mui/icons-material/MusicNote';\r\nimport {PostsData} from \"components/Profile/MyPosts/MyPostsContainer\";\r\n\r\ntype MyPostsType = {\r\n    postsData: Array<PostsData>\r\n    newPostText: string\r\n    addPost: (postText: string) => void\r\n    delPost: (id: string) => void\r\n    saveNewPostTextCB: (id: string, newPostText: string) => void\r\n    setNewPostText: (newText: string) => void\r\n    activeLikeColorCB: (id: string, value: 'primary' | 'secondary') => void\r\n    activeDisLikeColorCB: (id: string, value: 'primary' | 'secondary') => void\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              views={p.views}\r\n              activeLikeColor={p.activeLikeColor}\r\n              activeDisLikeColor={p.activeDisLikeColor}\r\n              activeLikeColorCB={props.activeLikeColorCB}\r\n              activeDisLikeColorCB={props.activeDisLikeColorCB}\r\n              comments={p.comments}\r\n              delPost={props.delPost}\r\n              saveNewPostTextCB={props.saveNewPostTextCB}\r\n        />\r\n    );\r\n\r\n    const addPost = () => {\r\n        if (props.newPostText.trim()) {\r\n            props.addPost(props.newPostText)\r\n        }\r\n    }\r\n\r\n    const newPostElement = React.createRef<HTMLDivElement>()\r\n\r\n    const onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.newPostText.trim()) {\r\n                props.addPost(props.newPostText)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onPostChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n\r\n                <form className={s.addPostContainer}>\r\n                    <TextField className={s.preparePostTextarea}\r\n                               ref={newPostElement}\r\n                               value={props.newPostText}\r\n                               onChange={onPostChange}\r\n                               onKeyDown={onKeyDown}\r\n                               label={'write something'}\r\n                               multiline\r\n                               minRows={4}\r\n                               maxRows={4}\r\n                    ></TextField>\r\n                    <div className={s.postIcons}>\r\n                        <ImageIcon color={'primary'}/>\r\n                        <MusicNoteIcon color={'primary'}/>\r\n                        <VideocamIcon color={'primary'}/>\r\n                        <AddAPhotoIcon color={'primary'}/>\r\n                        <IconButton className={s.btnPost} onClick={addPost} size={'medium'} color={'primary'}\r\n                                    sx={{borderRadius: '5px'}}>\r\n                            <AddIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                </form>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n// type AddNewPostFormType = {\r\n//     profileTextarea: string\r\n// }\r\n//\r\n// const maxLengthCreator_10 = maxLengthCreator(10)\r\n//\r\n// const AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n//\r\n//     return (\r\n//         <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n//             <Field name=\"profileTextarea\"\r\n//                    className={s.textarea}\r\n//                    placeholder={'Add your post'}\r\n//                    component={Textarea}\r\n//                    validate={[required, maxLengthCreator_10]}\r\n//             ></Field>\r\n//             <button className={s.btnPost}>+</button>\r\n//         </form>\r\n//     );\r\n// }\r\n//\r\n// const AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\n/*\r\n________________________________________________________________________________________________________________________\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    // // @ts-ignore\r\n    // window.props.push(props)\r\n    // console.log('MyPosts')\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              onLikeHandler={props.onLikeHandler}\r\n              onDisLikeHandler={props.onDisLikeHandler}\r\n              delPost={props.delPost}\r\n        />\r\n    );\r\n\r\n    const addPost = (value: AddNewPostFormType) => {\r\n        // console.log(value)\r\n        props.addPost(value.profileTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <AddNewPostReduxForm onSubmit={addPost}/>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n________________________________________________________________________________________________________________________\r\nclass MyPosts extends React.PureComponent<MyPostsType> {\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({a:12})\r\n        },1000)\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    render() {\r\n        console.log('Render')\r\n        console.log(this.props)\r\n\r\n        const postsDataContent = this.props.postsData.map(p =>\r\n            <Post key={p.id}\r\n                  id={p.id}\r\n                  message={p.message}\r\n                  likesCount={p.likesCount}\r\n                  disLikesCount={p.disLikesCount}\r\n                  onLikeHandler={this.props.onLikeHandler}\r\n                  onDisLikeHandler={this.props.onDisLikeHandler}\r\n                  delPost={this.props.delPost}\r\n            />\r\n        );\r\n\r\n        const addPost = (value: AddNewPostFormType) => {\r\n            console.log(value)\r\n            this.props.addPost(value.profileTextarea)\r\n        }\r\n\r\n        return (\r\n            <div className={s.postsContainer}>\r\n                <div className={s.postsBlock}>\r\n                    <h3 className={s.title}>My Posts</h3>\r\n                    <AddNewPostReduxForm onSubmit={addPost}/>\r\n                    <div className={s.posts}>\r\n                        <ul>\r\n                            {postsDataContent}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n________________________________________________________________________________________________________________________\r\ntype MyPostsType = {\r\n    postsData: Array<{ id: string, message: string, likesCount: number, disLikesCount: number }>\r\n    addPost: (postText: string) => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n// @ts-ignore\r\nwindow.props = []\r\nconst MyPosts = (props: MyPostsType) => {\r\n    // @ts-ignore\r\n    window.props.push(props)\r\n    console.log('MyPosts')\r\n    console.log(props)\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              onLikeHandler={props.onLikeHandler}\r\n              onDisLikeHandler={props.onDisLikeHandler}\r\n              delPost={props.delPost}\r\n        />\r\n    );\r\n\r\n    const addPost = (value: AddNewPostFormType) => {\r\n        console.log(value)\r\n        props.addPost(value.profileTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <AddNewPostReduxForm onSubmit={addPost}/>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n */\r\n\r\n/*\r\nconst newPostElement = React.createRef<HTMLDivElement>()\r\n\r\nconst onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.newPostText.trim()) {\r\n                props.addPost()\r\n            }\r\n        }\r\n    }\r\n\r\nreturn (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <form className={s.addPostContainer}>\r\n                    <TextField className={s.textarea}\r\n                              ref={newPostElement}\r\n                              value={props.newPostText}\r\n                              onChange={onPostChange}\r\n                              onKeyDown={onKeyDown}\r\n                              label={'Add your new post'}\r\n                              multiline\r\n                              minRows={4}\r\n                              maxRows={4}\r\n                    ></TextField>\r\n                    <IconButton className={s.btnPost} onClick={addPost} size={'medium'} color={'primary'} sx={{ml: '2vw'}}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </form>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n */\r\n","import React from 'react';\r\nimport {\r\n    activeDisLikeColorCB,\r\n    activeLikeColorCB,\r\n    addPost,\r\n    delPost, saveNewPostTextCB,\r\n    setNewPostText,\r\n} from \"../../../redux/profile_page_reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type PostsData = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n    disLikesCount: number\r\n    views: number\r\n    isLike: boolean\r\n    isDislike: boolean\r\n    comments: number\r\n    activeLikeColor: 'primary' | 'secondary'\r\n    activeDisLikeColor: 'primary' | 'secondary'\r\n}\r\nexport type ProfilePageType = {\r\n    postsData: Array<PostsData>\r\n    newPostText: string\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): ProfilePageType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n    delPost,\r\n    saveNewPostTextCB,\r\n    setNewPostText,\r\n    activeLikeColorCB,\r\n    activeDisLikeColorCB\r\n})(MyPosts);\r\n\r\n\r\n/*\r\nconst MyPostsContainer = (props: MyPostsContainerType) => {\r\n\r\n    return <StoreContext.Consumer>\r\n        {(store) => {\r\n\r\n            let state = store.getState();\r\n            const addPost = () => store.dispatch(addPostAC());\r\n            const updateMyPostText = (text: string) => store.dispatch(updateMyPostTextAC(text));\r\n\r\n            return <MyPosts updateMyPostText={updateMyPostText}\r\n                     addPost={addPost}\r\n                     newPostText={state.profilePage.newPostText}\r\n                     postsData={state.profilePage.postsData}\r\n                     dispatch={store.dispatch}\r\n            />}\r\n        }\r\n    </StoreContext.Consumer>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updateMyPostText: (text: string) => void\r\n    addPost: () => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n */","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileDataType} from \"./ProfileContainer\";\r\nimport {FormInputsType} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\ntype ProfileType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savedPhotoTC: (ava: string | Blob) => void\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlag: boolean\r\n    personDataFlagToogle: (personDataFlag: boolean) => void\r\n    errorStatusFlag: string\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n\r\n    const saveProfileData = (formData: FormInputsType) => {\r\n        props.saveProfileData(formData)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         updateStatusTC={props.updateStatusTC}\r\n                         status={props.status}\r\n                         isOwner={props.isOwner}\r\n                         savedPhoto={props.savedPhotoTC}\r\n                         saveProfileData={saveProfileData}\r\n                         personDataFlag={props.personDataFlag}\r\n                         personDataFlagToggle={props.personDataFlagToogle}\r\n                         errorStatusFlag={props.errorStatusFlag}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusTC,\r\n    loginTC,\r\n    personDataFlagToogle,\r\n    savedPhotoTC,\r\n    saveProfileData,\r\n    updateStatusTC\r\n} from \"../../redux/profile_page_reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {FormInputsType} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\ntype PathParamsType = { userId: string }\r\nexport type ProfileDataType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string,\r\n        website: null,\r\n        vk: string,\r\n        twitter: string,\r\n        instagram: string,\r\n        youtube: null,\r\n        github: string,\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>\r\ntype MapStatePropsType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    fake: number\r\n    personDataFlag: boolean\r\n    errorStatusFlag: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    loginTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savedPhotoTC: (ava: string | Blob) => void\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlagToogle: (personDataFlag: boolean) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authorizedUserId}`\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.loginTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props}\r\n                        status={this.props.status}\r\n                        profile={this.props.profile}\r\n                        updateStatusTC={this.props.updateStatusTC}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        saveProfileData={this.props.saveProfileData}\r\n                        personDataFlagToogle={this.props.personDataFlagToogle}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        fake: state.profilePage.fake,\r\n        personDataFlag: state.profilePage.personDataFlag,\r\n        errorStatusFlag: state.profilePage.errorStatusFlag\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {loginTC, getStatusTC, updateStatusTC, savedPhotoTC, saveProfileData, personDataFlagToogle}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {loginTC}),\r\n//     withAuthRedirect(AuthRedirectComponen))(withRouter(ProfileContainer))\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n// const withR = withRouter(ProfileContainer)\r\n// const ProfileContainerWithProps = connect(mapStateToProps, {loginTC})(withR)\r\n// let AuthRedirectComponen = withAuthRedirect(ProfileContainerWithProps)\r\n\r\n/*\r\nconnect - коннектит нас к стору\r\nwithRouter - коннектит нас к урлу\r\n */\r\n"],"names":["ProfileStatusWithHooks","props","activateEditMode","personDataFlagToggle","className","s","personDataFlag","ProfileReduxForm","profile","isOwner","onSubmit","formData","saveProfileData","initialValues","ProfileData","aboutMe","lookingForAJobDescription","lookingForAJob","IconButton","onClick","style","borderRadius","color","Edit","reduxForm","form","error","handleSubmit","Field","placeholder","component","Input","validate","required","name","htmlFor","type","id","Save","cursor","useState","editMode","setEditMode","status","setStatus","useEffect","Object","keys","length","PreLoader","src","photos","large","alt","multiple","position","top","onChange","e","target","files","savedPhoto","Tooltip","title","AddAPhoto","fullName","TextField","value","currentTarget","variant","autoFocus","Button","sx","ml","updateStatusTC","marginLeft","errorStatusFlag","message","postText","setNewPostText","multiline","trim","saveNewPostTextCB","boxShadow","Visibility","views","ChatBubble","comments","activeLikeColor","activeLikeColorCB","ThumbUpAlt","likesCount","activeDisLikeColor","activeDisLikeColorCB","ThumbDownAlt","disLikesCount","delPost","Delete","MyPosts","React","useAutoAnimate","listRef","postsDataContent","postsData","map","p","newPostElement","ref","newPostText","onKeyDown","key","addPost","label","minRows","maxRows","Image","MusicNote","Videocam","size","Add","MyPostsContainer","connect","state","profilePage","savedPhotoTC","personDataFlagToogle","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","loginTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","fake","withRouter","withAuthRedirect"],"sourceRoot":""}
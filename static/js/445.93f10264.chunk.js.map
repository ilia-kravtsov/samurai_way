{"version":3,"file":"static/js/445.93f10264.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/@mui/icons-material/Edit.js","../node_modules/@mui/icons-material/ThumbDownAlt.js","../node_modules/@mui/icons-material/ThumbUpAlt.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"avaContainer\":\"ProfileInfo_avaContainer__lOiiw\",\"avaDescrBlock\":\"ProfileInfo_avaDescrBlock__ah0mf\",\"avaBorderBlock\":\"ProfileInfo_avaBorderBlock__x+YCT\",\"ava\":\"ProfileInfo_ava__VB5Zl\",\"borderDescriptionBLock\":\"ProfileInfo_borderDescriptionBLock__gjtUO\",\"descriptionContainer\":\"ProfileInfo_descriptionContainer__JQkdj\",\"aboutMe\":\"ProfileInfo_aboutMe__pgwxz\",\"editInput\":\"ProfileInfo_editInput__L1ZNO\",\"status\":\"ProfileInfo_status__F1IVg\",\"statusBlock\":\"ProfileInfo_statusBlock__4TWAM\"};","import React, {ChangeEvent, LegacyRef, useEffect, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deActivateStatus = () => {\r\n        setEditMode(false)\r\n        props.updateStatusTC(status)\r\n    }\r\n\r\n    const activateStatus = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.borderDescriptionBLock}>\r\n            <div className={s.status}>Status:</div>\r\n            {editMode ? <div className={s.statusBlock}>\r\n                    <input value={status}\r\n                           onChange={changeStatus}\r\n                           className={s.editInput}\r\n                           autoFocus\r\n                    />\r\n                    <Button sx={{ml: '10px'}} variant={'contained'} onClick={deActivateStatus}>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n                : <div className={s.statusBlock}>\r\n                    {props.status || \"I haven't added my status yet\"}\r\n                    <IconButton onClick={activateStatus}\r\n                                style={{marginLeft: '20px', boxShadow: '1px 0 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                                color={'primary'}>\r\n                        <EditIcon/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n// state = {\r\n//     editMode: false,\r\n//     status: this.props.status\r\n// }\r\n//\r\n// activateStatus = () => {\r\n//     this.setState({\r\n//         editMode: true,\r\n//         status: this.props.status\r\n//     })\r\n// }\r\n//\r\n// deActivateStatus = () => {\r\n//     this.setState({\r\n//         editMode: false,\r\n//         status: this.state.status\r\n//     })\r\n//     this.props.updateStatusTC(this.state.status)\r\n// }\r\n//\r\n// changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     this.setState({\r\n//         status: e.currentTarget.value\r\n//     })\r\n// }\r\n//\r\n// componentDidUpdate(prevProps:Readonly < ProfileStatusType >, prevState:Readonly<{}>)\r\n// {\r\n//     if (prevProps.status !== this.props.status) {\r\n//         this.setState({\r\n//             status: this.props.status\r\n//         })\r\n//     }\r\n// }","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileDataType} from \"../ProfileContainer\";\r\nimport {PreLoader} from \"../../common/PreLoader/PreLoader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileDataType\r\n    updateStatusTC: (status: string) => void\r\n    status: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfo) => {\r\n\r\n    if (Object.keys(props.profile).length === 0) {\r\n        return <PreLoader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avaContainer}>\r\n                <div className={s.avaDescrBlock}>\r\n                    <div className={s.avaBorderBlock}>\r\n                        <img src={props.profile.photos.large || 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'}\r\n                             alt=\"ava\" className={s.ava}/>\r\n                    </div>\r\n                    {/*<ProfileStatus status={props.status} updateStatusTC={props.updateStatusTC}/>*/}\r\n                    <ProfileStatusWithHooks status={props.status} updateStatusTC={props.updateStatusTC}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n/*\r\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU\"\r\n */","// extracted by mini-css-extract-plugin\nexport default {\"postsContainer\":\"MyPosts_postsContainer__+a-fc\",\"postsBlock\":\"MyPosts_postsBlock__+QrrQ\",\"sideBar\":\"MyPosts_sideBar__8Wxb7\",\"posts\":\"MyPosts_posts__PGtgV\",\"btnPost\":\"MyPosts_btnPost__N4vLV\",\"addPostContainer\":\"MyPosts_addPostContainer__PJUUk\",\"title\":\"MyPosts_title__gAaBj\",\"textarea\":\"MyPosts_textarea__rpvkR\",\"form_control\":\"MyPosts_form_control__r8zfG\",\"error\":\"MyPosts_error__AvN+b\",\"erorr\":\"MyPosts_erorr__jiOX7\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__bqPb0\",\"imgSpanContainer\":\"Post_imgSpanContainer__gVGtm\",\"postMessage\":\"Post_postMessage__WLyIK\",\"title\":\"Post_title__zgxAF\",\"likeDisContainer\":\"Post_likeDisContainer__0VF8p\",\"itemImg\":\"Post_itemImg__p73pQ\",\"likes\":\"Post_likes__iIUFs\",\"anglePost\":\"Post_anglePost__mlR4e\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\nimport {IconButton} from '@mui/material';\r\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@mui/icons-material/ThumbDownAlt';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n    disLikesCount: number\r\n    id: string\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    const likeClick = () => {\r\n        props.onLikeHandler(props.id)\r\n    }\r\n\r\n    const disLikeClick = () => {\r\n        props.onDisLikeHandler(props.id)\r\n    }\r\n\r\n    const delClick = () => {\r\n        props.delPost(props.id)\r\n    }\r\n\r\n    return (\r\n        <li className={s.postContainer}>\r\n            <div className={s.imgSpanContainer}>\r\n                <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU' alt='brad pit' className={s.itemImg}/>\r\n                <span className={s.anglePost}></span>\r\n                <span className={s.postMessage}>{props.message}</span>\r\n            </div>\r\n            <div className={s.likeDisContainer}>\r\n                <IconButton onClick={likeClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ThumbUpAltIcon />\r\n                </IconButton>\r\n                <span className={s.likes}>{props.likesCount}</span>\r\n                <IconButton onClick={disLikeClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ThumbDownAltIcon />\r\n                </IconButton>\r\n                <span className={s.likes}>{props.disLikesCount}</span>\r\n                <IconButton onClick={delClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../validators/validators\";\r\nimport {Textarea} from \"components/common/FormsConntrols/FormControls\";\r\n\r\ntype MyPostsType = {\r\n    postsData: Array<{ id: string, message: string, likesCount: number, disLikesCount: number }>\r\n    addPost: (postText: string) => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n// // @ts-ignore\r\n// window.props = []\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    // // @ts-ignore\r\n    // window.props.push(props)\r\n    // console.log('MyPosts')\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              onLikeHandler={props.onLikeHandler}\r\n              onDisLikeHandler={props.onDisLikeHandler}\r\n              delPost={props.delPost}\r\n        />\r\n    );\r\n\r\n    const addPost = (value: AddNewPostFormType) => {\r\n        // console.log(value)\r\n        props.addPost(value.profileTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <AddNewPostReduxForm onSubmit={addPost}/>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\n/*\r\nclass MyPosts extends React.PureComponent<MyPostsType> {\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({a:12})\r\n        },1000)\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    render() {\r\n        console.log('Render')\r\n        console.log(this.props)\r\n\r\n        const postsDataContent = this.props.postsData.map(p =>\r\n            <Post key={p.id}\r\n                  id={p.id}\r\n                  message={p.message}\r\n                  likesCount={p.likesCount}\r\n                  disLikesCount={p.disLikesCount}\r\n                  onLikeHandler={this.props.onLikeHandler}\r\n                  onDisLikeHandler={this.props.onDisLikeHandler}\r\n                  delPost={this.props.delPost}\r\n            />\r\n        );\r\n\r\n        const addPost = (value: AddNewPostFormType) => {\r\n            console.log(value)\r\n            this.props.addPost(value.profileTextarea)\r\n        }\r\n\r\n        return (\r\n            <div className={s.postsContainer}>\r\n                <div className={s.postsBlock}>\r\n                    <h3 className={s.title}>My Posts</h3>\r\n                    <AddNewPostReduxForm onSubmit={addPost}/>\r\n                    <div className={s.posts}>\r\n                        <ul>\r\n                            {postsDataContent}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n________________________________________________________________________________________________________________________\r\ntype MyPostsType = {\r\n    postsData: Array<{ id: string, message: string, likesCount: number, disLikesCount: number }>\r\n    addPost: (postText: string) => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n// @ts-ignore\r\nwindow.props = []\r\nconst MyPosts = (props: MyPostsType) => {\r\n    // @ts-ignore\r\n    window.props.push(props)\r\n    console.log('MyPosts')\r\n    console.log(props)\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              onLikeHandler={props.onLikeHandler}\r\n              onDisLikeHandler={props.onDisLikeHandler}\r\n              delPost={props.delPost}\r\n        />\r\n    );\r\n\r\n    const addPost = (value: AddNewPostFormType) => {\r\n        console.log(value)\r\n        props.addPost(value.profileTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <AddNewPostReduxForm onSubmit={addPost}/>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n */\r\n\r\n/*\r\nconst newPostElement = React.createRef<HTMLDivElement>()\r\n\r\nconst onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.newPostText.trim()) {\r\n                props.addPost()\r\n            }\r\n        }\r\n    }\r\n\r\nreturn (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <form className={s.addPostContainer}>\r\n                    <TextField className={s.textarea}\r\n                              ref={newPostElement}\r\n                              value={props.newPostText}\r\n                              onChange={onPostChange}\r\n                              onKeyDown={onKeyDown}\r\n                              label={'Add your new post'}\r\n                              multiline\r\n                              minRows={4}\r\n                              maxRows={4}\r\n                    ></TextField>\r\n                    <IconButton className={s.btnPost} onClick={addPost} size={'medium'} color={'primary'} sx={{ml: '2vw'}}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </form>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n */\r\n","import React from 'react';\r\nimport {\r\n    addPost,\r\n    delPost,\r\n    onDisLikeHandler,\r\n    onLikeHandler,\r\n} from \"../../../redux/profile_page_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type PostsData = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n    disLikesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    postsData: Array<PostsData>\r\n    newPostText: string\r\n}\r\ntype MapStatePropsTypePosts = {\r\n    postsData: Array<PostsData>\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsTypePosts => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n    onLikeHandler,\r\n    onDisLikeHandler,\r\n    delPost\r\n})(MyPosts);\r\n\r\n\r\n/*\r\nconst MyPostsContainer = (props: MyPostsContainerType) => {\r\n\r\n    return <StoreContext.Consumer>\r\n        {(store) => {\r\n\r\n            let state = store.getState();\r\n            const addPost = () => store.dispatch(addPostAC());\r\n            const updateMyPostText = (text: string) => store.dispatch(updateMyPostTextAC(text));\r\n\r\n            return <MyPosts updateMyPostText={updateMyPostText}\r\n                     addPost={addPost}\r\n                     newPostText={state.profilePage.newPostText}\r\n                     postsData={state.profilePage.postsData}\r\n                     dispatch={store.dispatch}\r\n            />}\r\n        }\r\n    </StoreContext.Consumer>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updateMyPostText: (text: string) => void\r\n    addPost: () => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n */","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer, PostsData} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileDataType} from \"./ProfileContainer\";\r\n\r\ntype ProfileType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <ProfileInfo profile={props.profile} updateStatusTC={props.updateStatusTC} status={props.status}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatusTC, loginTC, updateStatusTC} from \"../../redux/profile_page_reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype PathParamsType = { userId: string }\r\nexport type ProfileDataType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string,\r\n        website: null,\r\n        vk: string,\r\n        twitter: string,\r\n        instagram: string,\r\n        youtube: null,\r\n        github: string,\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>\r\ntype MapStatePropsType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    fake: number\r\n}\r\ntype MapDispatchToPropsType = {\r\n    loginTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authorizedUserId}`\r\n            // if (!userId) {\r\n            //     this.props.history.push('/login')\r\n            // }\r\n        }\r\n        this.props.loginTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props}\r\n                        status={this.props.status}\r\n                        profile={this.props.profile}\r\n                        updateStatusTC={this.props.updateStatusTC}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        fake: state.profilePage.fake\r\n    }\r\n    }\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {loginTC, getStatusTC, updateStatusTC}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {loginTC}),\r\n//     withAuthRedirect(AuthRedirectComponen))(withRouter(ProfileContainer))\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n// const withR = withRouter(ProfileContainer)\r\n// const ProfileContainerWithProps = connect(mapStateToProps, {loginTC})(withR)\r\n// let AuthRedirectComponen = withAuthRedirect(ProfileContainerWithProps)\r\n\r\n\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M22 4h-2c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h2V4zM2.17 11.12c-.11.25-.17.52-.17.8V13c0 1.1.9 2 2 2h5.5l-.92 4.65c-.05.22-.02.46.08.66.23.45.52.86.88 1.22L10 22l6.41-6.41c.38-.38.59-.89.59-1.42V6.34C17 5.05 15.95 4 14.66 4h-8.1c-.71 0-1.36.37-1.72.97l-2.67 6.15z\"\n}), 'ThumbDownAlt');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2 20h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1H2v11zm19.83-7.12c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.84C7 18.95 8.05 20 9.34 20h8.11c.7 0 1.36-.37 1.72-.97l2.66-6.15z\"\n}), 'ThumbUpAlt');\nexports.default = _default;"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","value","onChange","e","currentTarget","autoFocus","Button","sx","ml","variant","onClick","updateStatusTC","IconButton","style","marginLeft","boxShadow","color","Edit","Object","keys","profile","length","PreLoader","src","photos","large","alt","message","onLikeHandler","id","ThumbUpAlt","likesCount","onDisLikeHandler","ThumbDownAlt","disLikesCount","delPost","Delete","React","useAutoAnimate","listRef","postsDataContent","postsData","map","p","AddNewPostReduxForm","onSubmit","addPost","profileTextarea","ref","maxLengthCreator_10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","loginTC","getStatusTC","compose","auth","isAuth","fake","withRouter","withAuthRedirect","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}
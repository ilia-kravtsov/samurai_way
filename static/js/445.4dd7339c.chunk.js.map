{"version":3,"file":"static/js/445.4dd7339c.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","../node_modules/@mui/icons-material/Edit.js","../node_modules/@mui/icons-material/ThumbDownAlt.js","../node_modules/@mui/icons-material/ThumbUpAlt.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"avaContainer\":\"ProfileInfo_avaContainer__lOiiw\",\"avaDescrBlock\":\"ProfileInfo_avaDescrBlock__ah0mf\",\"avaBorderBlock\":\"ProfileInfo_avaBorderBlock__x+YCT\",\"ava\":\"ProfileInfo_ava__VB5Zl\",\"borderDescriptionBLock\":\"ProfileInfo_borderDescriptionBLock__gjtUO\",\"descriptionContainer\":\"ProfileInfo_descriptionContainer__JQkdj\",\"aboutMe\":\"ProfileInfo_aboutMe__pgwxz\",\"editInput\":\"ProfileInfo_editInput__L1ZNO\",\"status\":\"ProfileInfo_status__F1IVg\",\"statusBlock\":\"ProfileInfo_statusBlock__4TWAM\",\"formPersonInfromation\":\"ProfileInfo_formPersonInfromation__fWPNS\",\"contact\":\"ProfileInfo_contact__wWpIA\",\"formError\":\"ProfileInfo_formError__KAybw\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport {Button, IconButton} from \"@mui/material\";\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport {ProfileDataType} from \"components/Profile/ProfileContainer\";\r\nimport {Input, Textarea} from \"components/common/FormsConntrols/FormControls\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"validators/validators\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n    profile: ProfileDataType\r\n    isOwner: boolean\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlag: boolean\r\n    personDataFlagToggle: (personDataFlag: boolean) => void\r\n    errorStatusFlag: string\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        props.personDataFlagToggle(true)\r\n    }\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const deActivateStatus = () => {\r\n        setEditMode(false)\r\n        props.updateStatusTC(status)\r\n    }\r\n\r\n    const activateStatus = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmit = (formData: FormInputsType) => {\r\n        props.saveProfileData(formData)\r\n    }\r\n\r\n    return (\r\n        <div className={s.borderDescriptionBLock}>\r\n            <div className={s.status}>Status:</div>\r\n            {editMode ? <div className={s.statusBlock}>\r\n                    <input value={status}\r\n                           onChange={changeStatus}\r\n                           className={s.editInput}\r\n                           autoFocus\r\n                    />\r\n                    <Button sx={{ml: '10px'}} variant={'contained'} onClick={deActivateStatus}>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n                : <div className={s.statusBlock}>\r\n                    {props.status || \"I haven't added my status yet\"}\r\n                    <IconButton onClick={activateStatus}\r\n                                style={{marginLeft: '20px', boxShadow: '1px 0 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                                color={'primary'}>\r\n                        <EditIcon/>\r\n                    </IconButton>\r\n                    {props.errorStatusFlag && <div>{props.errorStatusFlag}</div>}\r\n                </div>\r\n            }\r\n            {props.personDataFlag\r\n                ? <ProfileReduxForm profile={props.profile}\r\n                                    isOwner={props.isOwner}\r\n                                    activateEditMode={activateEditMode}\r\n                                    onSubmit={onSubmit}\r\n                                    initialValues={props.profile}/>\r\n                : <ProfileData profile={props.profile}\r\n                               isOwner={props.isOwner}\r\n                               activateEditMode={activateEditMode}/>}\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataTypes = {\r\n    profile: ProfileDataType\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataTypes) => {\r\n\r\n    return (\r\n        <div className={s.formPersonInfromation}>\r\n            {props.isOwner && <button onClick={props.activateEditMode}>Edit</button>}\r\n            <div>Full name: {props.profile.fullName || \"Simon\"}</div>\r\n            <div>Looking for a job: {props.profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div>About me: {props.profile.aboutMe || \"i'm the best\"}</div>\r\n            <div>Contacts: {Object.keys(props.profile.contacts).map(key => {\r\n                // @ts-ignore\r\n                return <Contact contactTitle={key} contactValue={props.profile.contacts[key]} key={key}/>\r\n            }) || \"+7999999999\"}</div>\r\n            <div>My professional skills: {props.profile.lookingForAJobDescription || \"i almost know React\"}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type FormInputsType = {\r\n    userId: number\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    skills: string\r\n    contacts: {\r\n        facebook: string | null\r\n        website: string | null\r\n        vk: string | null\r\n        twitter: string | null\r\n        instagram: string | null\r\n        youtube: string | null\r\n        github: string | null\r\n        mainLink: string | null\r\n    }\r\n}\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<FormInputsType, ProfileDataTypes> & ProfileDataTypes> = (props) => {\r\n\r\n    const {profile, error} = props\r\n    console.log(error)\r\n    return (\r\n        <form className={s.formPersonInfromation} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                Full name: <Field placeholder={'add your full name'}\r\n                                  component={Input}\r\n                                  validate={[required]}\r\n                                  name={'fullName'}\r\n                                  className={s.login}/>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"checkboxId\">Looking for a job:</label>\r\n                <Field type={\"checkbox\"}\r\n                       id={'checkboxId'}\r\n                       component={'input'}\r\n                       name={'lookingForAJob'}\r\n                       className={s.remember}/>\r\n            </div>\r\n            <div>\r\n                About me: <Field placeholder={'tell about yourself'}\r\n                                 component={Input}\r\n                                 validate={[required]}\r\n                                 name={'aboutMe'}\r\n                                 className={s.login}/>\r\n            </div>\r\n            <div>\r\n                Contacts: {Object.keys(profile.contacts).map(key => {\r\n                return (\r\n                    <div className={s.contact} key={key}>\r\n                        {key}: <Field placeholder={key}\r\n                                      component={Input}\r\n                                      validate={[required]}\r\n                                      name={'contacts.' + key}\r\n                                      className={s.login}/>\r\n                    </div>\r\n                )\r\n            }) || \"+7999999999\"}\r\n            </div>\r\n            <div>\r\n                My professional skills: <Field placeholder={'your skills'}\r\n                                               component={Textarea}\r\n                                               validate={[required]}\r\n                                               name={'lookingForAJobDescription'}\r\n                                               className={s.login}/>\r\n            </div>\r\n            {error && <div className={s.formError}>{error}</div>}\r\n            <button>\r\n                Fix\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileReduxForm = reduxForm<FormInputsType, ProfileDataTypes>({form: 'profileData'})(ProfileDataForm)\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = (props: ContactType) => {\r\n    return <div>{props.contactTitle}: {props.contactValue}</div>\r\n}\r\n\r\n\r\n// state = {\r\n//     editMode: false,\r\n//     status: this.props.status\r\n// }\r\n//\r\n// activateStatus = () => {\r\n//     this.setState({\r\n//         editMode: true,\r\n//         status: this.props.status\r\n//     })\r\n// }\r\n//\r\n// deActivateStatus = () => {\r\n//     this.setState({\r\n//         editMode: false,\r\n//         status: this.state.status\r\n//     })\r\n//     this.props.updateStatusTC(this.state.status)\r\n// }\r\n//\r\n// changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n//     this.setState({\r\n//         status: e.currentTarget.value\r\n//     })\r\n// }\r\n//\r\n// componentDidUpdate(prevProps:Readonly < ProfileStatusType >, prevState:Readonly<{}>)\r\n// {\r\n//     if (prevProps.status !== this.props.status) {\r\n//         this.setState({\r\n//             status: this.props.status\r\n//         })\r\n//     }\r\n// }","import React, {ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ProfileDataType} from \"../ProfileContainer\";\r\nimport {PreLoader} from \"../../common/PreLoader/PreLoader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {FormInputsType, ProfileStatusWithHooks} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileDataType\r\n    updateStatusTC: (status: string) => void\r\n    status: string\r\n    isOwner: boolean\r\n    savedPhoto: (ava: string | Blob) => void\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlag: boolean\r\n    personDataFlagToogle: (personDataFlag: boolean) => void\r\n    errorStatusFlag: string\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfo) => {\r\n\r\n    if (Object.keys(props.profile).length === 0) {\r\n        return <PreLoader/>\r\n    }\r\n\r\n    const onMainPhotoSElect = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n           props.savedPhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avaContainer}>\r\n                <div className={s.avaDescrBlock}>\r\n                    <div className={s.avaBorderBlock}>\r\n                        <img src={props.profile.photos.large || 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU'}\r\n                             alt=\"ava\" className={s.ava}/>\r\n                    </div>\r\n                    {props.isOwner && <input type=\"file\" onChange={onMainPhotoSElect}/>}\r\n                    <ProfileStatusWithHooks status={props.status}\r\n                                            updateStatusTC={props.updateStatusTC}\r\n                                            profile={props.profile}\r\n                                            isOwner={props.isOwner}\r\n                                            saveProfileData={props.saveProfileData}\r\n                                            personDataFlag={props.personDataFlag}\r\n                                            personDataFlagToggle={props.personDataFlagToogle}\r\n                                            errorStatusFlag={props.errorStatusFlag}\r\n                    />\r\n                    {/*<ProfileStatus status={props.status} updateStatusTC={props.updateStatusTC}/>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n/*\r\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU\"\r\n */","// extracted by mini-css-extract-plugin\nexport default {\"postsContainer\":\"MyPosts_postsContainer__+a-fc\",\"postsBlock\":\"MyPosts_postsBlock__+QrrQ\",\"sideBar\":\"MyPosts_sideBar__8Wxb7\",\"posts\":\"MyPosts_posts__PGtgV\",\"btnPost\":\"MyPosts_btnPost__N4vLV\",\"addPostContainer\":\"MyPosts_addPostContainer__PJUUk\",\"title\":\"MyPosts_title__gAaBj\",\"textarea\":\"MyPosts_textarea__rpvkR\",\"form_control\":\"MyPosts_form_control__r8zfG\",\"error\":\"MyPosts_error__AvN+b\",\"erorr\":\"MyPosts_erorr__jiOX7\"};","// extracted by mini-css-extract-plugin\nexport default {\"postContainer\":\"Post_postContainer__bqPb0\",\"imgSpanContainer\":\"Post_imgSpanContainer__gVGtm\",\"postMessage\":\"Post_postMessage__WLyIK\",\"title\":\"Post_title__zgxAF\",\"likeDisContainer\":\"Post_likeDisContainer__0VF8p\",\"itemImg\":\"Post_itemImg__p73pQ\",\"likes\":\"Post_likes__iIUFs\",\"anglePost\":\"Post_anglePost__mlR4e\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\nimport {IconButton} from '@mui/material';\r\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@mui/icons-material/ThumbDownAlt';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n    disLikesCount: number\r\n    id: string\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n\r\n    const likeClick = () => {\r\n        props.onLikeHandler(props.id)\r\n    }\r\n\r\n    const disLikeClick = () => {\r\n        props.onDisLikeHandler(props.id)\r\n    }\r\n\r\n    const delClick = () => {\r\n        props.delPost(props.id)\r\n    }\r\n\r\n    return (\r\n        <li className={s.postContainer}>\r\n            <div className={s.imgSpanContainer}>\r\n                <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRKrBK-eMr3u6DP0wzI2zNVrOGDizdwug_pNA&usqp=CAU' alt='brad pit' className={s.itemImg}/>\r\n                <span className={s.anglePost}></span>\r\n                <span className={s.postMessage}>{props.message}</span>\r\n            </div>\r\n            <div className={s.likeDisContainer}>\r\n                <IconButton onClick={likeClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ThumbUpAltIcon />\r\n                </IconButton>\r\n                <span className={s.likes}>{props.likesCount}</span>\r\n                <IconButton onClick={disLikeClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <ThumbDownAltIcon />\r\n                </IconButton>\r\n                <span className={s.likes}>{props.disLikesCount}</span>\r\n                <IconButton onClick={delClick}\r\n                            color={'primary'}\r\n                            sx={{boxShadow: '0 1px 5px 0 rgba(0, 0, 0, 0.2)'}}\r\n                >\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../validators/validators\";\r\nimport {Textarea} from \"components/common/FormsConntrols/FormControls\";\r\n\r\ntype MyPostsType = {\r\n    postsData: Array<{ id: string, message: string, likesCount: number, disLikesCount: number }>\r\n    addPost: (postText: string) => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n// // @ts-ignore\r\n// window.props = []\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    // // @ts-ignore\r\n    // window.props.push(props)\r\n    // console.log('MyPosts')\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              onLikeHandler={props.onLikeHandler}\r\n              onDisLikeHandler={props.onDisLikeHandler}\r\n              delPost={props.delPost}\r\n        />\r\n    );\r\n\r\n    const addPost = (value: AddNewPostFormType) => {\r\n        // console.log(value)\r\n        props.addPost(value.profileTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <AddNewPostReduxForm onSubmit={addPost}/>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\n/*\r\nclass MyPosts extends React.PureComponent<MyPostsType> {\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({a:12})\r\n        },1000)\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    render() {\r\n        console.log('Render')\r\n        console.log(this.props)\r\n\r\n        const postsDataContent = this.props.postsData.map(p =>\r\n            <Post key={p.id}\r\n                  id={p.id}\r\n                  message={p.message}\r\n                  likesCount={p.likesCount}\r\n                  disLikesCount={p.disLikesCount}\r\n                  onLikeHandler={this.props.onLikeHandler}\r\n                  onDisLikeHandler={this.props.onDisLikeHandler}\r\n                  delPost={this.props.delPost}\r\n            />\r\n        );\r\n\r\n        const addPost = (value: AddNewPostFormType) => {\r\n            console.log(value)\r\n            this.props.addPost(value.profileTextarea)\r\n        }\r\n\r\n        return (\r\n            <div className={s.postsContainer}>\r\n                <div className={s.postsBlock}>\r\n                    <h3 className={s.title}>My Posts</h3>\r\n                    <AddNewPostReduxForm onSubmit={addPost}/>\r\n                    <div className={s.posts}>\r\n                        <ul>\r\n                            {postsDataContent}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n________________________________________________________________________________________________________________________\r\ntype MyPostsType = {\r\n    postsData: Array<{ id: string, message: string, likesCount: number, disLikesCount: number }>\r\n    addPost: (postText: string) => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n// @ts-ignore\r\nwindow.props = []\r\nconst MyPosts = (props: MyPostsType) => {\r\n    // @ts-ignore\r\n    window.props.push(props)\r\n    console.log('MyPosts')\r\n    console.log(props)\r\n    const [listRef] = useAutoAnimate<HTMLUListElement>()\r\n\r\n    const postsDataContent = props.postsData.map(p =>\r\n        <Post key={p.id}\r\n              id={p.id}\r\n              message={p.message}\r\n              likesCount={p.likesCount}\r\n              disLikesCount={p.disLikesCount}\r\n              onLikeHandler={props.onLikeHandler}\r\n              onDisLikeHandler={props.onDisLikeHandler}\r\n              delPost={props.delPost}\r\n        />\r\n    );\r\n\r\n    const addPost = (value: AddNewPostFormType) => {\r\n        console.log(value)\r\n        props.addPost(value.profileTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <AddNewPostReduxForm onSubmit={addPost}/>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;\r\n\r\ntype AddNewPostFormType = {\r\n    profileTextarea: string\r\n}\r\n\r\nconst maxLengthCreator_10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddNewPostFormType>> = (props) => {\r\n\r\n    return (\r\n        <form className={s.addPostContainer} onSubmit={props.handleSubmit}>\r\n            <Field name=\"profileTextarea\"\r\n                   className={s.textarea}\r\n                   placeholder={'Add your post'}\r\n                   component={Textarea}\r\n                   validate={[required, maxLengthCreator_10]}\r\n            ></Field>\r\n            <button className={s.btnPost}>+</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<AddNewPostFormType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n */\r\n\r\n/*\r\nconst newPostElement = React.createRef<HTMLDivElement>()\r\n\r\nconst onKeyDown = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            if (props.newPostText.trim()) {\r\n                props.addPost()\r\n            }\r\n        }\r\n    }\r\n\r\nreturn (\r\n        <div className={s.postsContainer}>\r\n            <div className={s.postsBlock}>\r\n                <h3 className={s.title}>My Posts</h3>\r\n                <form className={s.addPostContainer}>\r\n                    <TextField className={s.textarea}\r\n                              ref={newPostElement}\r\n                              value={props.newPostText}\r\n                              onChange={onPostChange}\r\n                              onKeyDown={onKeyDown}\r\n                              label={'Add your new post'}\r\n                              multiline\r\n                              minRows={4}\r\n                              maxRows={4}\r\n                    ></TextField>\r\n                    <IconButton className={s.btnPost} onClick={addPost} size={'medium'} color={'primary'} sx={{ml: '2vw'}}>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </form>\r\n                <div className={s.posts}>\r\n                    <ul ref={listRef}>\r\n                        {postsDataContent}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n */\r\n","import React from 'react';\r\nimport {\r\n    addPost,\r\n    delPost,\r\n    onDisLikeHandler,\r\n    onLikeHandler,\r\n} from \"../../../redux/profile_page_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\n\r\nexport type PostsData = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n    disLikesCount: number\r\n}\r\nexport type ProfilePageType = {\r\n    postsData: Array<PostsData>\r\n    newPostText: string\r\n}\r\ntype MapStatePropsTypePosts = {\r\n    postsData: Array<PostsData>\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsTypePosts => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n    addPost,\r\n    onLikeHandler,\r\n    onDisLikeHandler,\r\n    delPost\r\n})(MyPosts);\r\n\r\n\r\n/*\r\nconst MyPostsContainer = (props: MyPostsContainerType) => {\r\n\r\n    return <StoreContext.Consumer>\r\n        {(store) => {\r\n\r\n            let state = store.getState();\r\n            const addPost = () => store.dispatch(addPostAC());\r\n            const updateMyPostText = (text: string) => store.dispatch(updateMyPostTextAC(text));\r\n\r\n            return <MyPosts updateMyPostText={updateMyPostText}\r\n                     addPost={addPost}\r\n                     newPostText={state.profilePage.newPostText}\r\n                     postsData={state.profilePage.postsData}\r\n                     dispatch={store.dispatch}\r\n            />}\r\n        }\r\n    </StoreContext.Consumer>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updateMyPostText: (text: string) => void\r\n    addPost: () => void\r\n    onLikeHandler: (id: string) => void\r\n    onDisLikeHandler: (id: string) => void\r\n    delPost: (id: string) => void\r\n}\r\n */","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer, PostsData} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileDataType} from \"./ProfileContainer\";\r\nimport {FormInputsType} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\ntype ProfileType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n    isOwner: boolean\r\n    savedPhotoTC: (ava: string | Blob) => void\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlag: boolean\r\n    personDataFlagToogle: (personDataFlag: boolean) => void\r\n    errorStatusFlag: string\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n\r\n    const saveProfileData = (formData: FormInputsType) => {\r\n        props.saveProfileData(formData)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <ProfileInfo profile={props.profile}\r\n                         updateStatusTC={props.updateStatusTC}\r\n                         status={props.status}\r\n                         isOwner={props.isOwner}\r\n                         savedPhoto={props.savedPhotoTC}\r\n                         saveProfileData={saveProfileData}\r\n                         personDataFlag={props.personDataFlag}\r\n                         personDataFlagToogle={props.personDataFlagToogle}\r\n                         errorStatusFlag={props.errorStatusFlag}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusTC,\r\n    loginTC,\r\n    personDataFlagToogle,\r\n    savedPhotoTC,\r\n    saveProfileData,\r\n    updateStatusTC\r\n} from \"../../redux/profile_page_reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {FormInputsType} from \"components/Profile/ProfileInfo/ProfileStatusWithHooks\";\r\n\r\ntype PathParamsType = { userId: string }\r\nexport type ProfileDataType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        facebook: string,\r\n        website: null,\r\n        vk: string,\r\n        twitter: string,\r\n        instagram: string,\r\n        youtube: null,\r\n        github: string,\r\n        mainLink: null\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\ntype ProfileContainerType = MapStatePropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>\r\ntype MapStatePropsType = {\r\n    profile: ProfileDataType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n    fake: number\r\n    personDataFlag: boolean\r\n    errorStatusFlag: string\r\n}\r\ntype MapDispatchToPropsType = {\r\n    loginTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savedPhotoTC: (ava: string | Blob) => void\r\n    saveProfileData: (formData: FormInputsType) => void\r\n    personDataFlagToogle: (personDataFlag: boolean) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authorizedUserId}`\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.loginTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Profile {...this.props}\r\n                        status={this.props.status}\r\n                        profile={this.props.profile}\r\n                        updateStatusTC={this.props.updateStatusTC}\r\n                        isOwner={!this.props.match.params.userId}\r\n                        saveProfileData={this.props.saveProfileData}\r\n                        personDataFlagToogle={this.props.personDataFlagToogle}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        fake: state.profilePage.fake,\r\n        personDataFlag: state.profilePage.personDataFlag,\r\n        errorStatusFlag: state.profilePage.errorStatusFlag\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {loginTC, getStatusTC, updateStatusTC, savedPhotoTC, saveProfileData, personDataFlagToogle}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {loginTC}),\r\n//     withAuthRedirect(AuthRedirectComponen))(withRouter(ProfileContainer))\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n// const withR = withRouter(ProfileContainer)\r\n// const ProfileContainerWithProps = connect(mapStateToProps, {loginTC})(withR)\r\n// let AuthRedirectComponen = withAuthRedirect(ProfileContainerWithProps)\r\n\r\n/*\r\nconnect - коннектит нас к стору\r\nwithRouter - коннектит нас к урлу\r\n */\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M22 4h-2c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h2V4zM2.17 11.12c-.11.25-.17.52-.17.8V13c0 1.1.9 2 2 2h5.5l-.92 4.65c-.05.22-.02.46.08.66.23.45.52.86.88 1.22L10 22l6.41-6.41c.38-.38.59-.89.59-1.42V6.34C17 5.05 15.95 4 14.66 4h-8.1c-.71 0-1.36.37-1.72.97l-2.67 6.15z\"\n}), 'ThumbDownAlt');\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M2 20h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1H2v11zm19.83-7.12c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.84C7 18.95 8.05 20 9.34 20h8.11c.7 0 1.36-.37 1.72-.97l2.66-6.15z\"\n}), 'ThumbUpAlt');\nexports.default = _default;"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","activateEditMode","personDataFlagToggle","className","s","value","onChange","e","currentTarget","autoFocus","Button","sx","ml","variant","onClick","updateStatusTC","IconButton","style","marginLeft","boxShadow","color","Edit","errorStatusFlag","personDataFlag","ProfileReduxForm","profile","isOwner","onSubmit","formData","saveProfileData","initialValues","ProfileData","fullName","lookingForAJob","aboutMe","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","lookingForAJobDescription","reduxForm","form","error","console","log","handleSubmit","Field","placeholder","component","Input","validate","required","name","htmlFor","type","id","Textarea","length","PreLoader","src","photos","large","alt","target","files","savedPhoto","personDataFlagToogle","message","onLikeHandler","ThumbUpAlt","likesCount","onDisLikeHandler","ThumbDownAlt","disLikesCount","delPost","Delete","React","useAutoAnimate","listRef","postsDataContent","postsData","p","AddNewPostReduxForm","addPost","profileTextarea","ref","maxLengthCreator_10","maxLengthCreator","MyPostsContainer","connect","state","profilePage","MyPosts","savedPhotoTC","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","loginTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","fake","withRouter","withAuthRedirect","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}